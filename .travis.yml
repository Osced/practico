language: php

# Seleccion de las versiones de lenguaje a probar: 5.2.17, 5.3.x, 5.4.x, Hack de face  etc
# TravisCI no soporta versiones 5.2.x and 5.3.x en Trusty. Se especifica distribucion Precise para esas versiones.
matrix:
  include:
    - php: 5.2
      dist: precise
    - php: 5.3
      dist: precise
php:
  - 5.4
  - 5.5
  - 5.6
  - 7.0
  - 7.1
  - hhvm
  - hhvm-3.3
  - hhvm-3.6
  - hhvm-3.9
  - hhvm-3.12
  - hhvm-3.15
  - hhvm-3.18
  - hhvm-nightly


# Especificacion opcional de variables de entorno, por ejemplo para bases de datos
env:
#  - SYMFONY_VERSION="2.0.*" DB=mysql
#  - SYMFONY_VERSION="dev-master" DB=mysql
#  - DB=pgsql
#  - DB=mongodb
  - DB=mysql

# Configura notificaciones (email, IRC, campfire etc)
notifications:
#  irc: "irc.freenode.org#yourfavouriteroomfortravis"
  email: "unix4you2@gmail.com"

# Lista de ramas que no sera tenidas en cuenta
branches:
  except:
    - MedidorDeVelocidad
    - gh-pages
    - HabilitacionAuditorias
    - AcordeonOpcionesCentrales
    - SeguimientoGA
    - ImplementacionBootStrap
    - SubFormularios
    - PruebasDeSoftware
    - GeneracionGraficosResponsive
    - CaptchaVisual
    - MaterialDesign
    - EditorWYSIWYGResponsive
    - SocialParser
    - MaquetacionBootstrap

# Ramas del repositorio a tener en cuenta
branches:
  only:
    - master
    # Mediante expresiones regulares
    #    - /^deploy-.*$/

#before_install:
# Comandos para preparar el sistema antes de las pruebas para instalar prerequisitos o dependencias
#ls -al

# Comandos para instalar prerequisitos o dependencias
install:
  - pear install pear/PHP_CodeSniffer
  - phpenv rehash
  #Verificamos la instalacion y el soporte de estandares
  #- phpcs -i
  #Otra forma: php pyrus.phar install pear/PHP_CodeSniffer-2.0.0RC4
  #Otra forma: pear install PHP_CodeSniffer-2.0.0RC4
  #Otra forma: pyrus install pear/PHP_CodeSniffer

services:
  - mysql

addons:
  apt:
    #sources:
    #  - mysql-5.7-trusty
    packages:
      - mysql-server

#Indica la distribucion a utilizar: trusty, precise, etc
dist: trusty

sudo: required

# Ejecuta scripts antes de correr las pruebas, puede utilizar variables de entorno
before_script:
  
  #Creamos la base de datos para la instalacion de prueba
  - sh -c "mysql -e 'create database practico;'"    #Metodo 1
  #- mysql -e 'create database antvel;'             #Metodo 2

  #Creamos el directorio de pruebas en caso de no existir
  #- mkdir dev_tools/tests

  #Asegura permisos completos en la carpeta de pruebas
  - chmod -R 777 dev_tools/tests

  #Ejecuta las pruebas para codigo PHP obsoleto de acuerdo la version de prueba utilizada
  #- phpcs --standard=PEAR index.php
  #Otra forma: phpcs --standard=Zend index.php
  #Otra forma: phpcs --standard=PHP53Compatibility core/

  #  - if [[ "$DB" == "pgsql" ]]; then psql -c "DROP DATABASE IF EXISTS hello_world_test;" -U postgres; fi
  #  - if [[ "$DB" == "pgsql" ]]; then psql -c "create database hello_world_test;" -U postgres; fi
  #  - if [[ "$DB" == "mysql" ]]; then mysql -e "create database IF NOT EXISTS hello_world_test;" -uroot; fi

# Comandos para construir.  Todos deben retornar cero, cualquier otra salida se considera una falla
script:
  - php dev_tools/tests/t_obsoletas.php
  - php dev_tools/tests/t_archivos.php
  - sh -c "mysql --version"
  - php dev_tools/tests/t_basedatos.php
#  - dev_tools/parche2zip.sh                 # Script para generacion de parches entre versiones
#  - dev_tools/practico2zip.sh              # Script para empaquetado y distribuci√≥n de nuevas versiones

# Comandos a ejecutar cuando se finaliza la consutrccion sin problemas
#after_success

# Comandos a ejecutar cuando se obtuvo algun error
#after_failure

# Comandos finales a ejecutar despues de ejecutar script: con exito
#after_script